{"name":"Sonos Group Controller","type":"com.fibaro.player","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_196"},"sections":{"items":[{"components":[{"name":"lbl_MySonos","style":{"weight":"1.2"},"text":"Mijn Sonos","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"btn_fav1","style":{"weight":"0.50"},"text":"1","type":"button","visible":true},{"name":"btn_fav2","style":{"weight":"0.50"},"text":"2","type":"button","visible":true}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"btn_fav3","style":{"weight":"0.50"},"text":"3","type":"button","visible":true},{"name":"btn_fav4","style":{"weight":"0.50"},"text":"4","type":"button","visible":true}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"lbl_RoomGroup","style":{"weight":"1.2"},"text":"Kamer Groep","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"btn_LeaveGroup","style":{"weight":"1.2"},"text":"Verlaat","type":"button","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"lbl_System","style":{"weight":"1.2"},"text":"Systeem","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"btn_refresh","style":{"weight":"1.2"},"text":"Vernieuwen","type":"button","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_196"}}},"uiCallbacks":[{"callback":"SetFavorite1","eventType":"onReleased","name":"btn_fav1"},{"callback":"SetFavorite2","eventType":"onReleased","name":"btn_fav2"},{"callback":"SetFavorite3","eventType":"onReleased","name":"btn_fav3"},{"callback":"SetFavorite4","eventType":"onReleased","name":"btn_fav4"},{"callback":"LeaveGroup","eventType":"onReleased","name":"btn_LeaveGroup"},{"callback":"refresh","eventType":"onReleased","name":"btn_refresh"}],"quickAppVariables":[{"name":"IPv4","type":"string","value":"none"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"----------------------------------------------------------------------------------\n-- Sonos Group Controller\n-- Version 1.3 (May 2022)\n-- Version 1.4 (January 2023)\n-- Copyright (c)2022-2023 Joep Verhaeg <info@joepverhaeg.nl> \n\n-- Full documentation you can find at:\n-- https://docs.joepverhaeg.nl/sonos-group-controller\n----------------------------------------------------------------------------------\n-- THANK YOU NOTE:\n-- I used the Sonos Player v0.1 from tinman/Intuitech as a base to start. Special \n-- thanks to him.\n\n-- DESCRIPTION:\n-- This Quick App is created to be used in Lua scenes and other Quick Apps. It has\n-- a minimal user interface that WILL NOT BE AUTOMATICALLY updated. Although there\n-- is a refresh button. It is designed this way to keep it low profile on your\n-- home network.\n\n-- On Init the Quick App retrieves the first 4 Sonos favorites and adds\n-- them to the buttons. At every command the volume status is updated. There is no\n-- polling for status changes. Press the refresh button for this. Again it is \n-- designed this way.\n\n-- SETUP:\n-- Set the IPv4 QUICK APP VARIABLE to the IP address of the Sonos Player you want\n-- to control. \n\n-- QUICKSTART:\n-- Lua : fibaro.call(qaId, \"savePlayStateAndPause\")\n-- Desc: Save the current player state and pause the player.\n\n-- Lua : fibaro.call(qaId, \"setPreviousPlayerState\")\n-- Desc: Retrieve the previous saved player state and set the play state to this.\n\n-- Lua : fibaro.call(qaId, \"playFavorite\", \"title\", \"15\")\n-- Desc: Play a Sonos favorite at the specified volume by using the name from the \n--       favorites list\n\n-- Lua : fibaro.call(qaId, \"AddToGroup\", \"playerUuid\")\n-- Desc: Add Sonos player to a group by using the Uuid of the group master.\n\n-- Lua : fibaro.call(qaId, \"LeaveGroup\")\n-- Desc: Remove the Sonos player from a group.\n\n-- Lua : fibaro.call(qaId, \"configureSleepTimer\", \"23:15:00\")\n-- Desc: Set the player to sleep at 23:15.\n\n-- Lua : fibaro.call(qaId, \"playFromUri\", \"uri\", \"meta\")\n-- Desc: Play an mp3, InTune or other audio format from an Uri.\n\n-- Lua : fibaro.call(qaId, \"setVolume\", \"15\")\n-- Desc: Set the Sonos Player volume.\n\nescapeCache = {}\nlocal function xmlEscape(s)\n    local r = escapeCache[s]\n    if not r then\n        local g = string.gsub\n        r = g(s, \"&\", \"&amp;\")\n        r = g(r, '\"', \"&quot;\")\n        r = g(r, \"'\", \"&apos;\")\n        r = g(r, \"<\", \"&lt;\")\n        r = g(r, \">\", \"&gt;\")\n        escapeCache[s] = r\n    end\n    return r\nend\n\nfunction QuickApp:onInit()\n    self:debug(\"onInit\")\n    self.ipaddr = self:getVariable(\"IPv4\")\n    self.port = 1400\n    self.mute = false\n    self:updateProperty(\"mute\", false)\n    self:updateProperty(\"power\", true)\n    --self:updateView(\"volslider\", \"value\", \"5\")\n    self.FAV = {}\n    self.AVTRANSPORT_URI = \"/MediaRenderer/AVTransport/Control\"\n    self.RENDERING_CONTROL_URI = \"/MediaRenderer/RenderingControl/Control\"\n    self.http = net.HTTPClient({ timeout = 5000 })\n    \n    if (self.ipaddr ~= \"none\") then\n        self:getZoneInfo()\n        self:getFavorites()\n        self:getVolume()\n    else\n        self:debug(\"Please set the IPv4 Quick App variable to the IP address of the Sonos Player!\")\n    end\nend\n\nfunction QuickApp:savePlayStateAndPause()\n    local GET_TRANSPORT_INFO_ACTION = '\"urn:schemas-upnp-org:service:AVTransport:1#GetTransportInfo\"'\n    local GET_TRANSPORT_INFO_BODY = '<u:GetTransportInfo xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID></u:GetTransportInfo>'\n    self:sendRequest(self.AVTRANSPORT_URI, GET_TRANSPORT_INFO_ACTION, GET_TRANSPORT_INFO_BODY,\n        function(data)\n            --self:debug(data.data)\n            local xmlData = xmlParser.parseXml(data.data)\n            local state = xmlParser.getXmlPath(xmlData, \"s:Envelope\", \"s:Body\", \"u:GetTransportInfoResponse\", \"CurrentTransportState\")[1][1].text\n            self:updateProperty(\"state\", state)\n            --self:debug(state)\n            self:pause()\n        end,\n        function(data)\n            self:debug(\"DEVICE IS OFFLINE - ERROR READING STATE\")\n            self:updateProperty(\"state\", \"OFFLINE\")\n            --self:pause()\n        end)\nend\n\nfunction QuickApp:setPreviousPlayerState()\n    self:debug(self.id)\n    local state = fibaro.getValue(self.id, \"state\")\n    self:debug(state)\n    if (state == \"PLAYING\") then\n        self:play()\n    end\nend\n\nfunction QuickApp:getFavorites()\n    local ZONE_CONTROL_URI = \"/MediaServer/ContentDirectory/Control\"\n    local SOAP_ACTION = \"urn:schemas-upnp-org:service:ContentDirectory:1#Browse\"\n    local BODY = \"<u:Browse xmlns:u=\\\"urn:schemas-upnp-org:service:ContentDirectory:1\\\"><ObjectID>FV:2</ObjectID><BrowseFlag>BrowseDirectChildren</BrowseFlag><Filter>*</Filter><StartingIndex>0</StartingIndex><RequestedCount></RequestedCount><SortCriteria>+r:ordinal</SortCriteria></u:Browse>\"\n    self:sendRequest(ZONE_CONTROL_URI, SOAP_ACTION, BODY, \n    function(data)\n        --self:debug(data.data)\n        local xmlData = xmlParser.parseXml(data.data)\n        local browseResponse = xmlParser.getXmlPath(xmlData, \"s:Envelope\", \"s:Body\", \"u:BrowseResponse\", \"Result\")[1][1].text\n        local xmlBrowseResponse = xmlParser.parseXml(browseResponse)\n        local favoriteItems = xmlParser.getXmlPath(xmlBrowseResponse, \"DIDL-Lite\")\n        -- check if table is empty\n        if (favoriteItems[1][1] ~= nil) then\n            local i = 1\n            repeat\n                local title = xmlParser.getXmlPath(favoriteItems[1][i], \"item\", \"dc:title\")[1][1].text\n                --self:debug(xmlParser.getXmlPath(favoriteItems[1][i], \"item\", \"res\")[1][1])\n                if xmlParser.getXmlPath(favoriteItems[1][i], \"item\", \"res\")[1][1] then\n                    resPath = xmlParser.getXmlPath(favoriteItems[1][i], \"item\", \"res\")[1][1].text\n                else\n                    resPath = \"\"\n                end\n                local res = xmlEscape(resPath)\n                local resmd = xmlEscape(xmlParser.getXmlPath(favoriteItems[1][i], \"item\", \"r:resMD\")[1][1].text)\n                --self:debug(i,title,res,resmd) \n                self.FAV[i] = {title=title,source=res,metadata=resmd}\n                i = i+1\n            until (favoriteItems[1][i] == nill)\n            for k=1, i-1 do\n                self:updateView(\"btn_fav\" .. k, \"text\", self.FAV[k]['title'])\n                --self:debug(json.encode(self.FAV))\n                self:debug(self.FAV[k]['title'] .. \" ->\" .. self.FAV[k]['source'])\n                if k == 4 then break end\n            end\n        end\n    end,\n    function(data) self:debug(\"ERROR\"); self:debug(data) end)\nend\n\nfunction QuickApp:playFavorite(title, volume)\n    local source, meta\n    for k,v in pairs(self.FAV) do\n        if v['title'] == title then\n            source = v['source']\n            meta   = v['metadata']\n            break\n        end\n    end\n    if (source) then\n        self:setVolume(tonumber(volume))\n        self:playFromUri(source, meta)\n    else\n        self:debug(\"ERROR: Favorite with title \" .. title .. \" not found!\")\n    end\nend\n\nfunction QuickApp:getZoneInfo()\n  local ZONE_CONTROL_URI = \"/ZoneGroupTopology/Control\"\n  local SOAP_ACTION = \"urn:schemas-upnp-org:service:ZoneGroupTopology:1#GetZoneGroupState\"\n  local BODY = \"<u:GetZoneGroupState xmlns:u=\\\"urn:schemas-upnp-org:service:ZoneGroupTopology:1\\\"></u:GetZoneGroupState>\"\n  self:sendRequest(ZONE_CONTROL_URI, SOAP_ACTION, BODY, \n        function(data) \n          --self:debug(data.data)\n          local xmlData = xmlParser.parseXml(data.data)\n          local zoneGroupState = xmlParser.getXmlPath(xmlData, \"s:Envelope\", \"s:Body\", \"u:GetZoneGroupStateResponse\", \"ZoneGroupState\")[1][1].text\n          local xmlZoneGroupState = xmlParser.parseXml(zoneGroupState)\n          local zoneGroupMembers = xmlParser.getXmlPath(xmlZoneGroupState, \"ZoneGroupState\", \"ZoneGroups\", \"ZoneGroup\", \"ZoneGroupMember\")\n          for k,v in pairs(zoneGroupMembers) do\n            local zonename = v['attribute']['ZoneName']\n            local uuid     = v['attribute']['UUID']\n            local ip       = v['attribute']['Location']:match(\"(%d+%.%d+%.%d+%.%d+)\")\n            local location = v['attribute']['Location']\n            if (ip == self.ipaddr) then\n                self:updateProperty(\"manufacturer\", \"Sonos\")\n                self:updateProperty(\"model\", uuid) \n                self:updateView(\"lbl_System\", \"text\", \"Systeem: \" .. zonename)\n            end\n          end\n        end, \n        function(data) self:debug(\"ERROR\"); self:debug(data) end\n  )\nend\n\nfunction QuickApp:refresh()\n    self:getFavorites()\n    self:getVolume()\nend\n\nfunction QuickApp:SetFavorite1()\n    if (self.FAV[1] ~= nill) then\n        self:playFromUri(self.FAV[1]['source'], self.FAV[1]['metadata'])\n        self:getVolume()\n    end\nend\n\nfunction QuickApp:SetFavorite2()\n    if (self.FAV[2] ~= nill) then\n        self:playFromUri(self.FAV[2]['source'], self.FAV[2]['metadata'])\n        self:getVolume()\n    end\nend\n\nfunction QuickApp:SetFavorite3()\n    if (self.FAV[3] ~= nill) then\n        self:playFromUri(self.FAV[3]['source'], self.FAV[3]['metadata'])\n        self:getVolume()\n    end\nend\n\nfunction QuickApp:SetFavorite4()\n    if (self.FAV[4] ~= nill) then\n        self:playFromUri(self.FAV[4]['source'], self.FAV[4]['metadata'])\n        self:getVolume()\n    end\nend\n\nfunction QuickApp:AddToGroup(playerUuid)\n  local GROUPMANAGEMENT_CONTROL_URI = \"/GroupManagement/Control\"\n  local SOAP_ACTION = \"urn:schemas-upnp-org:service:GroupManagement:1#AddMember\"\n  local BODY = \"<u:AddMember xmlns:u=\\\"urn:schemas-upnp-org:service:GroupManagement:1\\\"><MemberID>\" .. playerUuid ..\"</MemberID></u:AddMember>\"\n  self:sendRequest(GROUPMANAGEMENT_CONTROL_URI, SOAP_ACTION, BODY, \n        function(data) self:debug(data.data) end, \n        function(data) self:debug(\"ERROR\"); self:debug(data) end\n  )\nend\n\nfunction QuickApp:LeaveGroup()\n    local AVTRANSPORT_CONTROL_URI = \"/MediaRenderer/AVTransport/Control\"\n    local SOAP_ACTION = \"urn:schemas-upnp-org:service:AVTransport:1#BecomeCoordinatorOfStandaloneGroup\"\n    local BODY = \"<u:BecomeCoordinatorOfStandaloneGroup xmlns:u=\\\"urn:schemas-upnp-org:service:AVTransport:1\\\"><InstanceID>0</InstanceID></u:BecomeCoordinatorOfStandaloneGroup>\"\n    self:sendRequest(AVTRANSPORT_CONTROL_URI, SOAP_ACTION, BODY, \n        function(data) self:debug(data.data) end, \n        function(data) self:debug(\"ERROR\"); self:debug(data) end\n    )\nend\n\nfunction QuickApp:RemoveMember(playerUuid)\n  local GROUPMANAGEMENT_CONTROL_URI = \"/GroupManagement/Control\"\n  local SOAP_ACTION = \"urn:schemas-upnp-org:service:GroupManagement:1#RemoveMember\"\n  local BODY = \"<u:RemoveMember xmlns:u=\\\"urn:schemas-upnp-org:service:GroupManagement:1\\\"><MemberID>\" .. playerUuid ..\"</MemberID></u:RemoveMember>\"\n  self:sendRequest(GROUPMANAGEMENT_CONTROL_URI, SOAP_ACTION, BODY, \n        function(data) self:debug(data.data) end, \n        function(data) self:debug(\"ERROR\"); self:debug(data) end\n  )\nend\n\nfunction QuickApp:getCurTrackInfo(data)\n    local ok = pcall(function()\n    local xmlData = xmlParser.parseXml(data)\n    local trackData = xmlParser.getXmlPath(xmlData, \"s:Envelope\", \"s:Body\", \"u:GetPositionInfoResponse\", \"TrackURI\")[1][1].text\n            local function formatURI(uri)\n                if (uri ~= nil) then\n                    if (string.find(uri, \"http://\", 1)) then\n            uri =  string.gsub(uri, \"http:/*\", \"\")\n                    end\n                    if (string.find(uri,\"x%-file%-cifs://\", 1)) then\n                        uri =  string.gsub(uri, \"x%-file%-cifs:/*\", \"\")\n                    end\n                    if (string.find(uri, 'x%-rincon%-mp3radio://', 1)) then\n            uri =  string.gsub(uri, \"x%-rincon%-mp3radio:/*\", \"\")\n                    end\n                else\n                uri = \"empty\"\n                end\n                return uri\n            end\n            self:updateProperty(\"currentSourceURI\", formatURI(trackData))\n            self:setVariable(\"currentSourceURI\", formatURI(trackData))\nend)\nif (not ok) then\nself:debug('xml parse error')\nend\nend\n\nfunction QuickApp:getCurrentSourceURI()\n    local GET_CUR_TRACK_ACTION = \"urn:schemas-upnp-org:service:AVTransport:1#GetPositionInfo\"\n    local GET_CUR_TRACK_BODY = \"<u:GetPositionInfo xmlns:u=\\\"urn:schemas-upnp-org:service:AVTransport:1\\\"><InstanceID>0</InstanceID><Channel>Master</Channel></u:GetPositionInfo>\"\n    self:sendRequest(self.AVTRANSPORT_URI, GET_CUR_TRACK_ACTION, GET_CUR_TRACK_BODY, \n        function(data) self:getCurTrackInfo(data.data) end, \n        function(data) self:debug(\"ERROR\"); self:debug(data) end\n    )\nend\n\nfunction QuickApp:GetMediaInfo()\n    local GET_CUR_TRACK_ACTION = \"urn:schemas-upnp-org:service:AVTransport:1#GetMediaInfo\"\n    local GET_CUR_TRACK_BODY = \"<u:GetMediaInfo xmlns:u=\\\"urn:schemas-upnp-org:service:AVTransport:1\\\"><InstanceID>0</InstanceID><Channel>Master</Channel></u:GetMediaInfo>\"\n    self:sendRequest(self.AVTRANSPORT_URI, GET_CUR_TRACK_ACTION, GET_CUR_TRACK_BODY, \n        function(data) self:debug(data.data) end\n    )\nend\n\nfunction QuickApp:getTransportInfo(callback, errorCallback)\n    local GET_TRANSPORT_INFO_ACTION = '\"urn:schemas-upnp-org:service:AVTransport:1#GetTransportInfo\"'\n    local GET_TRANSPORT_INFO_BODY = '<u:GetTransportInfo xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID></u:GetTransportInfo>'\nlocal success = function(data)\n        local ok = pcall(function()\n    local xmlData = xmlParser.parseXml(data.data)\n    local state = xmlParser.getXmlPath(xmlData, \"s:Envelope\", \"s:Body\", \"u:GetTransportInfoResponse\", \"CurrentTransportState\")[1][1].text\n            callback(state)\nend)\nif (not ok) then\nself:debug('xml parse error')\nend\nend\nself:sendRequest(self.AVTRANSPORT_URI, GET_TRANSPORT_INFO_ACTION, GET_TRANSPORT_INFO_BODY, success, errorCallback)\nend\n\nfunction QuickApp:playFromUri(uri, meta)\n    local SET_TRANSPORT_ACTION = '\"urn:schemas-upnp-org:service:AVTransport:1#SetAVTransportURI\"'\n    local PLAY_URI_BODY_TEMPLATE = '<u:SetAVTransportURI xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><CurrentURI>' ..uri.. '</CurrentURI><CurrentURIMetaData>' .. meta .. '</CurrentURIMetaData></u:SetAVTransportURI>'\nself:sendRequest(self.AVTRANSPORT_URI, SET_TRANSPORT_ACTION, PLAY_URI_BODY_TEMPLATE, \nfunction(data)\n            self:play()\n        end\n    )\nend\n\nfunction QuickApp:playFromCIFS(uri)\n    local muri = 'x-file-cifs://' .. uri\n    local PLAY_URI_BODY_TEMPLATE = '<u:SetAVTransportURI xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><CurrentURI>'..muri..'</CurrentURI><CurrentURIMetaData></CurrentURIMetaData></u:SetAVTransportURI>'\nlocal SET_TRANSPORT_ACTION = '\"urn:schemas-upnp-org:service:AVTransport:1#SetAVTransportURI\"'\nself:sendRequest(self.AVTRANSPORT_URI, SET_TRANSPORT_ACTION, PLAY_URI_BODY_TEMPLATE, \nfunction(data)\n            self:play()\n        end\n    )\nend\n\nfunction QuickApp:play()\n    local PLAY_ACTION = '\"urn:schemas-upnp-org:service:AVTransport:1#Play\"'\n    local PLAY_BODY = '<u:Play xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><Speed>1</Speed></u:Play>'\n    self:sendRequest(self.AVTRANSPORT_URI, PLAY_ACTION, PLAY_BODY)\n    self:getVolume()\nend\n\nfunction QuickApp:pause()\n    local PAUSE_ACTION = '\"urn:schemas-upnp-org:service:AVTransport:1#Pause\"'\n    local PAUSE_BODY = '<u:Pause xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><Speed>1</Speed></u:Pause>'\n    self:sendRequest(self.AVTRANSPORT_URI, PAUSE_ACTION, PAUSE_BODY)\n    self:getVolume()\nend\n\nfunction QuickApp:stop()\n    local STOP_ACTION = '\"urn:schemas-upnp-org:service:AVTransport:1#Stop\"'\n    local STOP_BODY = '<u:Stop xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><Speed>1</Speed></u:Stop>'\n    self:sendRequest(self.AVTRANSPORT_URI, STOP_ACTION, STOP_BODY)\n    self:getVolume()\nend\n\nfunction QuickApp:next()\n    local NEXT_ACTION = '\"urn:schemas-upnp-org:service:AVTransport:1#Next\"'\n    local NEXT_BODY = '<u:Next xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><Speed>1</Speed></u:Next>'\n    self:sendRequest(self.AVTRANSPORT_URI, NEXT_ACTION, NEXT_BODY)\n    self:getVolume()\nend\n\nfunction QuickApp:prev()\n    local PREV_ACTION = '\"urn:schemas-upnp-org:service:AVTransport:1#Previous\"'\n    local PREV_BODY = '<u:Previous xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><Speed>1</Speed></u:Previous>'\n    self:sendRequest(self.AVTRANSPORT_URI, PREV_ACTION, PREV_BODY)\n    self:getVolume()\nend\n\nfunction QuickApp:setVolume(volume)\n    local SET_VOLUME_ACTION = '\"urn:schemas-upnp-org:service:RenderingControl:1#SetVolume\"'\n    local SET_VOLUME_BODY_TEMPLATE = '<u:SetVolume xmlns:u=\"urn:schemas-upnp-org:service:RenderingControl:1\"><InstanceID>0</InstanceID><Channel>Master</Channel><DesiredVolume>'..tostring(volume)..'</DesiredVolume></u:SetVolume>'\nself:sendRequest(self.RENDERING_CONTROL_URI, SET_VOLUME_ACTION, SET_VOLUME_BODY_TEMPLATE)\n    self:updateProperty(\"volume\", volume)\nend\n\nfunction QuickApp:getVolume()\n    local success = function(data)\n        local ok = pcall(function()\n            local xmlData = xmlParser.parseXml(data.data)\n            local volume = xmlParser.getXmlPath(xmlData, \"s:Envelope\", \"s:Body\", \"u:GetVolumeResponse\", \"CurrentVolume\")[1][1].text\n                self:updateProperty(\"volume\", tonumber(volume))\n                self:updateView(\"slider\", \"value\", tonumber(volume))\n        end)\n        if (not ok) then\n            self:debug('xml parse error')\n        end\n    end\n    local GET_VOLUME_ACTION = '\"urn:schemas-upnp-org:service:RenderingControl:1#GetVolume\"'\n    local GET_VOLUME_BODY = '<u:GetVolume xmlns:u=\"urn:schemas-upnp-org:service:RenderingControl:1\"><InstanceID>0</InstanceID><Channel>Master</Channel></u:GetVolume>'\n    self:sendRequest(self.RENDERING_CONTROL_URI, GET_VOLUME_ACTION, GET_VOLUME_BODY, success)\nend\n\nfunction QuickApp:setMute(mute)\n    local m = mute\n    if type(m)=='boolean' then m = m and 1 or 0 end\n    local SET_MUTE_ACTION = '\"urn:schemas-upnp-org:service:RenderingControl:1#SetMute\"'\n    local SET_MUTE_BODY_TEMPLATE = '<u:SetMute xmlns:u=\"urn:schemas-upnp-org:service:RenderingControl:1\"><InstanceID>0</InstanceID><Channel>Master</Channel><DesiredMute>'..tonumber(m)..'</DesiredMute></u:SetMute>'\nself:sendRequest(self.RENDERING_CONTROL_URI, SET_MUTE_ACTION, SET_MUTE_BODY_TEMPLATE)\n    self:updateProperty(\"mute\", mute)\n    self.mute = mute\n    self:getVolume()\nend\n\nfunction QuickApp:domute() \n    self.mute = fibaro.getValue(plugin.mainDeviceId, \"mute\")\n    self.mute = not self.mute\n    self:setMute(self.mute)\n    self:getVolume()\nend\n\nfunction QuickApp:configureSleepTimer(timeWhenSleep)\n    self:debug(\"sleep timer for \" .. sleepMinutes .. \" minutes\")\n    local SET_SLEEP_ACTION = '\"urn:schemas-upnp-org:service:AVTransport:1#ConfigureSleepTimer\"'\n    local SET_SLEEP_BODY = '<u:ConfigureSleepTimer xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><NewSleepTimerDuration>' .. timeWhenSleep .. '</NewSleepTimerDuration></u:ConfigureSleepTimer>'\n    self:sendRequest(self.AVTRANSPORT_URI, SET_SLEEP_ACTION, SET_SLEEP_BODY,\n        function(data)\n            self:debug(json.encode(data))\n        end\n    )\nend\n\nfunction QuickApp:sendRequest(uri, action, body, successCallback, errorCallback)\n    local ENVELOPE = '<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body>'..body..'</s:Body></s:Envelope>'\n    self.http:request('http://' .. self.ipaddr .. ':' .. tostring(self.port) .. uri, {\n    options = {\n            headers = {\n                    ['Content-Type'] = 'text/xml',\n                    ['SOAPACTION'] = action\n            },\n            data = ENVELOPE,\n            method = 'POST'\n            },\n            success = function(response)\n                --self:debug(response.status)\n                --self:debug(response.data)\n                if successCallback ~= nil then successCallback(response) end\n            end\n            ,\n            error = function(message)\n                --self:debug(\"error:\", message)\n                if errorCallback ~= nil then errorCallback(resmessageponse) end\n        end         \n    })\nend"},{"name":"xmlParser","isMain":false,"isOpen":false,"content":"local function parseXml(xml)\r\n    local function dec2char(code)\r\n        code = tonumber(code)\r\n        return string.char(code > 255 and 0 or code)\r\n    end\r\n\r\n    local function hex2char(code)\r\n        code = tonumber(code, 16)\r\n        return string.char(code > 255 and 0 or code)\r\n    end\r\n\r\n    unescapeCache = {}\r\n    local function xmlUnescape(s)\r\n        local r = unescapeCache[s]\r\n        if not r then\r\n            local g = string.gsub\r\n            r = g(s, \"&quot;\", '\"')\r\n            r = g(r, \"&apos;\", \"'\")\r\n            r = g(r, \"&lt;\", \"<\")\r\n            r = g(r, \"&gt;\", \">\")\r\n            r = g(r, \"&#(%d%d?%d?%d?);\", dec2char)\r\n            r = g(r, \"&#x(%x%x?%x?%x?);\", hex2char)\r\n            r = g(r, \"&amp;\", \"&\")\r\n            unescapeCache[s] = r\r\n        end\r\n        return r\r\n    end\r\n\r\n    escapeCache = {}\r\n    local function xmlEscape(s)\r\n        local r = escapeCache[s]\r\n        if not r then\r\n            local g = string.gsub\r\n            r = g(s, \"&\", \"&amp;\")\r\n            r = g(r, '\"', \"&quot;\")\r\n            r = g(r, \"'\", \"&apos;\")\r\n            r = g(r, \"<\", \"&lt;\")\r\n            r = g(r, \">\", \"&gt;\")\r\n            escapeCache[s] = r\r\n        end\r\n        return r\r\n    end\r\n\r\n    local namePattern = \"[%a_:][%w%.%-_:]*\"\r\n\r\n    xml = string.gsub(xml, \"<!%[CDATA%[(.-)%]%]>\", xmlEscape) -- replace CDATA with escaped text\r\n    xml = string.gsub(xml, \"<%?.-%?>\", \"\") -- remove processing instructions\r\n    xml = string.gsub(xml, \"<!%-%-.-%-%->\", \"\") -- remove comments\r\n    xml = string.gsub(xml, \"<!.->\", \"\")\r\n\r\n    local root = {}\r\n    local parents = {}\r\n    local element = root\r\n    for closing, name, attributes, empty, text in string.gmatch(\r\n        xml,\r\n        \"<(/?)(\" .. namePattern .. \")(.-)(/?)>%s*([^<]*)%s*\"\r\n    ) do\r\n        if closing == \"/\" then\r\n            local parent = parents[element]\r\n            if parent and name == element.name then\r\n                element = parent\r\n            end\r\n        else\r\n            local child = {name = name, attribute = {}}\r\n            table.insert(element, child)\r\n            parents[child] = element\r\n            if empty ~= \"/\" then\r\n                element = child\r\n            end\r\n            for name, value in string.gmatch(attributes, \"(\" .. namePattern .. ')%s*=%s*\"(.-)\"') do\r\n                child.attribute[name] = xmlUnescape(value)\r\n            end\r\n        end\r\n        if text ~= \"\" then\r\n            local child = {text = xmlUnescape(text)}\r\n            table.insert(element, child)\r\n            parents[child] = element\r\n        end\r\n    end\r\n    return root[1]\r\nend\r\n\r\nlocal function getXmlPath(nodes, ...)\r\n    nodes = {nodes}\r\n    local arg = {...}\r\n    for i, name in ipairs(arg) do\r\n        local match = {}\r\n        for i, node in ipairs(nodes) do\r\n            if node.name == name then\r\n                match = nodes\r\n            else\r\n                for i, child in ipairs(node) do\r\n                    if child.name == name then\r\n                        table.insert(match, child)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n        nodes = match\r\n    end\r\n    return nodes\r\nend\r\n\r\nxmlParser = {\r\n    _VERSION     = \"0.1\",\r\n    _DESCRIPTION = \"simple xml parser\",\r\n    _LICENSE     = \"MIT (the same license as Lua itself)\",\r\n    parseXml     = parseXml,\r\n    getXmlPath   = getXmlPath,\r\n}"}]}